/*
 * DO NOT EDIT.
 *
 * Generated by the protocol buffer compiler.
 * Source: ChatMessage.proto
 *
 */

import Foundation
import SwiftProtobuf


struct ChatMessage: SwiftProtobuf.Message, SwiftProtobuf.Proto3Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf.ProtoNameProviding {
  public var swiftClassName: String {return "ChatMessage"}
  public var protoMessageName: String {return "ChatMessage"}
  public var protoPackageName: String {return ""}
  public static let _protobuf_fieldNames: FieldNameMap = [
    1: .same(proto: "title", swift: "title"),
    2: .same(proto: "body", swift: "body"),
  ]


  var title: String = ""

  var body: String = ""

  init() {}

  public mutating func _protoc_generated_decodeField<T: SwiftProtobuf.FieldDecoder>(setter: inout T, protoFieldNumber: Int) throws {
    switch protoFieldNumber {
    case 1: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &title)
    case 2: try setter.decodeSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: &body)
    default: break
    }
  }

  public func _protoc_generated_traverse(visitor: SwiftProtobuf.Visitor) throws {
    if title != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: title, fieldNumber: 1)
    }
    if body != "" {
      try visitor.visitSingularField(fieldType: SwiftProtobuf.ProtobufString.self, value: body, fieldNumber: 2)
    }
  }

  public func _protoc_generated_isEqualTo(other: ChatMessage) -> Bool {
    if title != other.title {return false}
    if body != other.body {return false}
    return true
  }
}
